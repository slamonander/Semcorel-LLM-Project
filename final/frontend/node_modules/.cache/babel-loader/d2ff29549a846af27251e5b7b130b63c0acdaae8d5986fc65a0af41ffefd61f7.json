{"ast":null,"code":"// // speakpage.js\n// import React, { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"./SpeakPage.css\"; // Import the CSS file here\n// import Avatar from \"./Avatar\";\n// function SpeakPage() {\n//   const [transcript, setTranscript] = useState(\"\");\n//   const [textInput, setTextInput] = useState(\"\");\n//   const [isListening, setIsListening] = useState(false);\n//   const navigate = useNavigate();\n//   // Function for handling Speech-to-Text\n//   const handleSpeechToText = () => {\n//     if (!(\"webkitSpeechRecognition\" in window)) {\n//       alert(\"Speech recognition is not supported in this browser.\");\n//       return;\n//     }\n//     const recognition = new window.webkitSpeechRecognition();\n//     recognition.lang = \"en-US\";\n//     recognition.interimResults = false;\n//     recognition.maxAlternatives = 1;\n//     recognition.onstart = () => setIsListening(true);\n//     recognition.onresult = (event) => {\n//       setTranscript(event.results[0][0].transcript);\n//       setIsListening(false);\n//     };\n//     recognition.onerror = (event) => {\n//       console.error(\"Speech recognition error\", event.error);\n//       setIsListening(false);\n//     };\n//     recognition.onend = () => setIsListening(false);\n//     recognition.start();\n//   };\n//   // Function for handling Text-to-Speech\n//   const handleTextToSpeech = () => {\n//     if (!(\"speechSynthesis\" in window)) {\n//       alert(\"Text-to-speech is not supported in this browser.\");\n//       return;\n//     }\n//     const utterance = new SpeechSynthesisUtterance(textInput);\n//     utterance.lang = \"en-US\";\n//     window.speechSynthesis.speak(utterance);\n//   };\n//   const handleBack = () => {\n//     navigate(\"/\");\n//   };\n//   return (\n//     <div className=\"speak-container\">\n//       <h1>Speech-to-Text and Text-to-Speech</h1>\n//       {/* Speech-to-Text Section */}\n//       <div style={{ margin: \"20px 0\" }}>\n//         <button className=\"back-button\" onClick={handleBack}>\n//           â¬… Back\n//         </button>\n//         <Avatar /> {/* Render the Avatar component */}\n//         <button\n//           onClick={handleSpeechToText}\n//           className=\"speech-button\"\n//           disabled={isListening}\n//         >\n//           {isListening ? \"Listening...\" : \"Start Speaking\"}\n//         </button>\n//         <p className=\"transcript\">Transcript: {transcript}</p>\n//       </div>\n//       {/* Text-to-Speech Section */}\n//       <div style={{ margin: \"20px 0\" }}>\n//         <textarea\n//           rows=\"4\"\n//           className=\"text-area\"\n//           value={textInput}\n//           onChange={(e) => setTextInput(e.target.value)}\n//           placeholder=\"Enter text to read out loud\"\n//         />\n//         <br />\n//         <button onClick={handleTextToSpeech} className=\"text-to-speech-button\">\n//           Read Text Aloud\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }\n// export default SpeakPage;\n// src/SpeakPage.js\nimport React,{useState}from'react';import{useNavigate}from'react-router-dom';import Coco from'./Coco';import'./SpeakPage.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const SpeakPage=()=>{const[conversationHistory,setConversationHistory]=useState([]);const[messages,setMessages]=useState([]);const[fontSize,setFontSize]=useState(19);// Default font size\nconst[isListening,setIsListening]=useState(false);const navigate=useNavigate();const addMessage=(content,className)=>{setMessages(prevMessages=>[...prevMessages,{content,className}]);};const sendMessage=async messageContent=>{if(!messageContent.trim())return;// Display user message\naddMessage(messageContent,'user-message');setConversationHistory(prevHistory=>[...prevHistory,{role:'user',content:messageContent}]);try{// Prepare JSON data\nconst payload={userInput:messageContent,history:JSON.stringify(conversationHistory)};// Send message to the server\nconst response=await fetch('http://localhost:8080/submit',{// Specify full URL\nmethod:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)});const data=await response.json();// Display bot response\naddMessage(data.response,'bot-message');setConversationHistory(prevHistory=>[...prevHistory,{role:'assistant',content:data.response}]);}catch(error){console.error('Error:',error);addMessage('An error occurred while sending your message.','bot-message');}};// Function for handling Speech-to-Text\nconst handleSpeechToText=()=>{if(!(\"webkitSpeechRecognition\"in window)){alert(\"Speech recognition is not supported in this browser.\");return;}const recognition=new window.webkitSpeechRecognition();recognition.lang=\"en-US\";recognition.interimResults=false;recognition.maxAlternatives=1;recognition.onstart=()=>setIsListening(true);recognition.onresult=event=>{const transcript=event.results[0][0].transcript;setIsListening(false);sendMessage(transcript);};recognition.onerror=event=>{console.error(\"Speech recognition error\",event.error);setIsListening(false);};recognition.onend=()=>setIsListening(false);recognition.start();};const changeFontSize=adjustment=>{setFontSize(prevSize=>Math.max(12,Math.min(36,prevSize+adjustment)));// Restrict between 12px and 36px\n};return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"triangle-container\",children:[/*#__PURE__*/_jsx(\"svg\",{className:\"triangle\",xmlns:\"http://www.w3.org/2000/svg\",viewBox:\"0 0 100 100\",preserveAspectRatio:\"none\",children:/*#__PURE__*/_jsx(\"path\",{className:\"wave\",d:\"M 0,100 Q 20,75 45,85 T 100,15 L 100,0 L 0,0 Z\",fill:\"#5A9BFF\",transform:\"skewY(-25)\"})}),/*#__PURE__*/_jsx(\"button\",{className:\"btn-invis\",onClick:()=>navigate('/'),children:/*#__PURE__*/_jsx(\"span\",{className:\"material-icons invis\",children:\"arrow_back_ios\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"coco-container\",children:/*#__PURE__*/_jsx(Coco,{className:\"coco-small\"})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"font-size-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>changeFontSize(-2),children:\"A-\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>changeFontSize(2),children:\"A+\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-container\",children:[/*#__PURE__*/_jsx(\"div\",{id:\"chat-box\",className:\"chat-box\",children:messages.map((msg,index)=>/*#__PURE__*/_jsx(\"div\",{className:`chat-message ${msg.className}`,style:{fontSize:`${fontSize}px`},children:msg.content},index))}),/*#__PURE__*/_jsx(\"div\",{className:\"input-container\",children:/*#__PURE__*/_jsx(\"button\",{onClick:handleSpeechToText,className:\"speech-button\",disabled:isListening,children:isListening?\"Listening...\":\"Start Speaking\"})})]})]});};export default SpeakPage;","map":{"version":3,"names":["React","useState","useNavigate","Coco","jsx","_jsx","jsxs","_jsxs","SpeakPage","conversationHistory","setConversationHistory","messages","setMessages","fontSize","setFontSize","isListening","setIsListening","navigate","addMessage","content","className","prevMessages","sendMessage","messageContent","trim","prevHistory","role","payload","userInput","history","JSON","stringify","response","fetch","method","headers","body","data","json","error","console","handleSpeechToText","window","alert","recognition","webkitSpeechRecognition","lang","interimResults","maxAlternatives","onstart","onresult","event","transcript","results","onerror","onend","start","changeFontSize","adjustment","prevSize","Math","max","min","children","xmlns","viewBox","preserveAspectRatio","d","fill","transform","onClick","id","map","msg","index","style","disabled"],"sources":["/Users/kavinrajasekaran/Documents/UCMerced/CurrentClasses/CSE120/Semcorel-LLM/Semcorel-LLM-Project/final/frontend/src/SpeakPage.js"],"sourcesContent":["// // speakpage.js\r\n// import React, { useState } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import \"./SpeakPage.css\"; // Import the CSS file here\r\n// import Avatar from \"./Avatar\";\r\n\r\n// function SpeakPage() {\r\n//   const [transcript, setTranscript] = useState(\"\");\r\n//   const [textInput, setTextInput] = useState(\"\");\r\n//   const [isListening, setIsListening] = useState(false);\r\n//   const navigate = useNavigate();\r\n\r\n//   // Function for handling Speech-to-Text\r\n//   const handleSpeechToText = () => {\r\n//     if (!(\"webkitSpeechRecognition\" in window)) {\r\n//       alert(\"Speech recognition is not supported in this browser.\");\r\n//       return;\r\n//     }\r\n\r\n//     const recognition = new window.webkitSpeechRecognition();\r\n//     recognition.lang = \"en-US\";\r\n//     recognition.interimResults = false;\r\n//     recognition.maxAlternatives = 1;\r\n\r\n//     recognition.onstart = () => setIsListening(true);\r\n//     recognition.onresult = (event) => {\r\n//       setTranscript(event.results[0][0].transcript);\r\n//       setIsListening(false);\r\n//     };\r\n//     recognition.onerror = (event) => {\r\n//       console.error(\"Speech recognition error\", event.error);\r\n//       setIsListening(false);\r\n//     };\r\n//     recognition.onend = () => setIsListening(false);\r\n\r\n//     recognition.start();\r\n//   };\r\n\r\n//   // Function for handling Text-to-Speech\r\n//   const handleTextToSpeech = () => {\r\n//     if (!(\"speechSynthesis\" in window)) {\r\n//       alert(\"Text-to-speech is not supported in this browser.\");\r\n//       return;\r\n//     }\r\n\r\n//     const utterance = new SpeechSynthesisUtterance(textInput);\r\n//     utterance.lang = \"en-US\";\r\n//     window.speechSynthesis.speak(utterance);\r\n//   };\r\n\r\n//   const handleBack = () => {\r\n//     navigate(\"/\");\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"speak-container\">\r\n//       <h1>Speech-to-Text and Text-to-Speech</h1>\r\n\r\n//       {/* Speech-to-Text Section */}\r\n//       <div style={{ margin: \"20px 0\" }}>\r\n//         <button className=\"back-button\" onClick={handleBack}>\r\n//           â¬… Back\r\n//         </button>\r\n//         <Avatar /> {/* Render the Avatar component */}\r\n//         <button\r\n//           onClick={handleSpeechToText}\r\n//           className=\"speech-button\"\r\n//           disabled={isListening}\r\n//         >\r\n//           {isListening ? \"Listening...\" : \"Start Speaking\"}\r\n//         </button>\r\n//         <p className=\"transcript\">Transcript: {transcript}</p>\r\n//       </div>\r\n \r\n//       {/* Text-to-Speech Section */}\r\n//       <div style={{ margin: \"20px 0\" }}>\r\n//         <textarea\r\n//           rows=\"4\"\r\n//           className=\"text-area\"\r\n//           value={textInput}\r\n//           onChange={(e) => setTextInput(e.target.value)}\r\n//           placeholder=\"Enter text to read out loud\"\r\n//         />\r\n//         <br />\r\n//         <button onClick={handleTextToSpeech} className=\"text-to-speech-button\">\r\n//           Read Text Aloud\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default SpeakPage;\r\n\r\n// src/SpeakPage.js\r\nimport React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Coco from './Coco';\r\nimport './SpeakPage.css';\r\n\r\nconst SpeakPage = () => {\r\n  const [conversationHistory, setConversationHistory] = useState([]);\r\n  const [messages, setMessages] = useState([]);\r\n  const [fontSize, setFontSize] = useState(19); // Default font size\r\n  const [isListening, setIsListening] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const addMessage = (content, className) => {\r\n    setMessages((prevMessages) => [\r\n      ...prevMessages,\r\n      { content, className },\r\n    ]);\r\n  };\r\n\r\n  const sendMessage = async (messageContent) => {\r\n    if (!messageContent.trim()) return;\r\n\r\n    // Display user message\r\n    addMessage(messageContent, 'user-message');\r\n    setConversationHistory((prevHistory) => [\r\n      ...prevHistory,\r\n      { role: 'user', content: messageContent },\r\n    ]);\r\n\r\n    try {\r\n      // Prepare JSON data\r\n      const payload = {\r\n        userInput: messageContent,\r\n        history: JSON.stringify(conversationHistory),\r\n      };\r\n\r\n      // Send message to the server\r\n      const response = await fetch('http://localhost:8080/submit', { // Specify full URL\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(payload),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      // Display bot response\r\n      addMessage(data.response, 'bot-message');\r\n      setConversationHistory((prevHistory) => [\r\n        ...prevHistory,\r\n        { role: 'assistant', content: data.response },\r\n      ]);\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      addMessage('An error occurred while sending your message.', 'bot-message');\r\n    }\r\n  };\r\n\r\n  // Function for handling Speech-to-Text\r\n  const handleSpeechToText = () => {\r\n    if (!(\"webkitSpeechRecognition\" in window)) {\r\n      alert(\"Speech recognition is not supported in this browser.\");\r\n      return;\r\n    }\r\n\r\n    const recognition = new window.webkitSpeechRecognition();\r\n    recognition.lang = \"en-US\";\r\n    recognition.interimResults = false;\r\n    recognition.maxAlternatives = 1;\r\n\r\n    recognition.onstart = () => setIsListening(true);\r\n    recognition.onresult = (event) => {\r\n      const transcript = event.results[0][0].transcript;\r\n      setIsListening(false);\r\n      sendMessage(transcript);\r\n    };\r\n    recognition.onerror = (event) => {\r\n      console.error(\"Speech recognition error\", event.error);\r\n      setIsListening(false);\r\n    };\r\n    recognition.onend = () => setIsListening(false);\r\n\r\n    recognition.start();\r\n  };\r\n\r\n  const changeFontSize = (adjustment) => {\r\n    setFontSize((prevSize) => Math.max(12, Math.min(36, prevSize + adjustment))); // Restrict between 12px and 36px\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"triangle-container\">\r\n        <svg className=\"triangle\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\">\r\n          <path className=\"wave\" d=\"M 0,100 Q 20,75 45,85 T 100,15 L 100,0 L 0,0 Z\" fill=\"#5A9BFF\" transform=\"skewY(-25)\"/>\r\n        </svg>\r\n        <button className=\"btn-invis\" onClick={() => navigate('/')}>\r\n          <span className=\"material-icons invis\">arrow_back_ios</span>\r\n        </button>\r\n        <div className=\"coco-container\">\r\n          <Coco className=\"coco-small\" />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"font-size-buttons\">\r\n        <button onClick={() => changeFontSize(-2)}>A-</button>\r\n        <button onClick={() => changeFontSize(2)}>A+</button>\r\n      </div>\r\n\r\n      {/* Chat container */}\r\n      <div className=\"chat-container\">\r\n        <div id=\"chat-box\" className=\"chat-box\">\r\n          {messages.map((msg, index) => (\r\n            <div\r\n              key={index}\r\n              className={`chat-message ${msg.className}`}\r\n              style={{ fontSize: `${fontSize}px` }}\r\n            >\r\n              {msg.content}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"input-container\">\r\n          <button\r\n            onClick={handleSpeechToText}\r\n            className=\"speech-button\"\r\n            disabled={isListening}\r\n          >\r\n            {isListening ? \"Listening...\" : \"Start Speaking\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpeakPage;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}