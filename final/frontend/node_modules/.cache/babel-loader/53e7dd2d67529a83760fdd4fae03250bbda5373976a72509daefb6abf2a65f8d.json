{"ast":null,"code":"\n// // src/SpeakPage.js\n// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import Coco from './Coco';\n// import './SpeakPage.css';\n\n// const SpeakPage = () => {\n//   const [conversationHistory, setConversationHistory] = useState([]);\n//   const [messages, setMessages] = useState([]);\n//   const [fontSize, setFontSize] = useState(19); // Default font size\n//   const [isListening, setIsListening] = useState(false);\n//   const navigate = useNavigate();\n\n//   const addMessage = (content, className) => {\n//     setMessages((prevMessages) => [\n//       ...prevMessages,\n//       { content, className },\n//     ]);\n//   };\n\n//   const sendMessage = async (messageContent) => {\n//     if (!messageContent.trim()) return;\n\n//     // Display user message\n//     addMessage(messageContent, 'user-message');\n//     setConversationHistory((prevHistory) => [\n//       ...prevHistory,\n//       { role: 'user', content: messageContent },\n//     ]);\n\n//     try {\n//       // Prepare JSON data\n//       const payload = {\n//         userInput: messageContent,\n//         history: JSON.stringify(conversationHistory),\n//       };\n\n//       // Send message to the server\n//       const response = await fetch('/submit', { // Specify full URL\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(payload),\n//       });\n\n//       const data = await response.json();\n\n//       // Display bot response\n//       addMessage(data.response, 'bot-message');\n//       setConversationHistory((prevHistory) => [\n//         ...prevHistory,\n//         { role: 'assistant', content: data.response },\n//       ]);\n\n//       // Speak the bot's response\n//       if ('speechSynthesis' in window) {\n//         const utterance = new SpeechSynthesisUtterance(data.response);\n//         utterance.lang = 'en-US';\n//         window.speechSynthesis.speak(utterance);\n//       } else {\n//         console.warn('Text-to-speech is not supported in this browser.');\n//       }\n//     } catch (error) {\n//       console.error('Error:', error);\n//       addMessage('An error occurred while sending your message.', 'bot-message');\n//     }\n//   };\n\n//   // Function for handling Speech-to-Text\n//   const handleSpeechToText = () => {\n//     if (!(\"webkitSpeechRecognition\" in window)) {\n//       alert(\"Speech recognition is not supported in this browser.\");\n//       return;\n//     }\n\n//     const recognition = new window.webkitSpeechRecognition();\n//     recognition.lang = \"en-US\";\n//     recognition.interimResults = false;\n//     recognition.maxAlternatives = 1;\n\n//     recognition.onstart = () => setIsListening(true);\n//     recognition.onresult = (event) => {\n//       const transcript = event.results[0][0].transcript;\n//       setIsListening(false);\n//       sendMessage(transcript);\n//     };\n//     recognition.onerror = (event) => {\n//       console.error(\"Speech recognition error\", event.error);\n//       setIsListening(false);\n//     };\n//     recognition.onend = () => setIsListening(false);\n\n//     recognition.start();\n//   };\n\n//   const changeFontSize = (adjustment) => {\n//     setFontSize((prevSize) => Math.max(12, Math.min(36, prevSize + adjustment))); // Restrict between 12px and 36px\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <div className=\"triangle-container\">\n//         <svg className=\"triangle\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\">\n//           <path className=\"wave\" d=\"M 0,100 Q 20,75 45,85 T 100,15 L 100,0 L 0,0 Z\" fill=\"#5A9BFF\" transform=\"skewY(-25)\"/>\n//         </svg>\n//         <button className=\"btn-invis\" onClick={() => navigate('/')}>\n//           <span className=\"material-icons invis\">arrow_back_ios</span>\n//         </button>\n//         <div className=\"coco-container\">\n//           <Coco className=\"coco-small\" />\n//         </div>\n//       </div>\n\n//       <div className=\"font-size-buttons\">\n//         <button onClick={() => changeFontSize(-2)}>A-</button>\n//         <button onClick={() => changeFontSize(2)}>A+</button>\n//       </div>\n\n//       {/* Chat container */}\n//       <div className=\"chat-container\">\n//         <div id=\"chat-box\" className=\"chat-box\">\n//           {messages.map((msg, index) => (\n//             <div\n//               key={index}\n//               className={`chat-message ${msg.className}`}\n//               style={{ fontSize: `${fontSize}px` }}\n//             >\n//               {msg.content}\n//             </div>\n//           ))}\n//         </div>\n//         <div className=\"input-container\">\n//           <button\n//             onClick={handleSpeechToText}\n//             className=\"speech-button\"\n//             disabled={isListening}\n//           >\n//             {isListening ? \"Listening...\" : \"Start Speaking\"}\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default SpeakPage;","map":{"version":3,"names":[],"sources":["/Users/kavinrajasekaran/Documents/UCMerced/CurrentClasses/CSE120/Semcorel-LLM/Semcorel-LLM-Project/final/frontend/src/SpeakPage.js"],"sourcesContent":["\r\n// // src/SpeakPage.js\r\n// import React, { useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import Coco from './Coco';\r\n// import './SpeakPage.css';\r\n\r\n// const SpeakPage = () => {\r\n//   const [conversationHistory, setConversationHistory] = useState([]);\r\n//   const [messages, setMessages] = useState([]);\r\n//   const [fontSize, setFontSize] = useState(19); // Default font size\r\n//   const [isListening, setIsListening] = useState(false);\r\n//   const navigate = useNavigate();\r\n\r\n//   const addMessage = (content, className) => {\r\n//     setMessages((prevMessages) => [\r\n//       ...prevMessages,\r\n//       { content, className },\r\n//     ]);\r\n//   };\r\n\r\n//   const sendMessage = async (messageContent) => {\r\n//     if (!messageContent.trim()) return;\r\n\r\n//     // Display user message\r\n//     addMessage(messageContent, 'user-message');\r\n//     setConversationHistory((prevHistory) => [\r\n//       ...prevHistory,\r\n//       { role: 'user', content: messageContent },\r\n//     ]);\r\n\r\n//     try {\r\n//       // Prepare JSON data\r\n//       const payload = {\r\n//         userInput: messageContent,\r\n//         history: JSON.stringify(conversationHistory),\r\n//       };\r\n\r\n//       // Send message to the server\r\n//       const response = await fetch('/submit', { // Specify full URL\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify(payload),\r\n//       });\r\n\r\n//       const data = await response.json();\r\n\r\n//       // Display bot response\r\n//       addMessage(data.response, 'bot-message');\r\n//       setConversationHistory((prevHistory) => [\r\n//         ...prevHistory,\r\n//         { role: 'assistant', content: data.response },\r\n//       ]);\r\n\r\n//       // Speak the bot's response\r\n//       if ('speechSynthesis' in window) {\r\n//         const utterance = new SpeechSynthesisUtterance(data.response);\r\n//         utterance.lang = 'en-US';\r\n//         window.speechSynthesis.speak(utterance);\r\n//       } else {\r\n//         console.warn('Text-to-speech is not supported in this browser.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error:', error);\r\n//       addMessage('An error occurred while sending your message.', 'bot-message');\r\n//     }\r\n//   };\r\n\r\n//   // Function for handling Speech-to-Text\r\n//   const handleSpeechToText = () => {\r\n//     if (!(\"webkitSpeechRecognition\" in window)) {\r\n//       alert(\"Speech recognition is not supported in this browser.\");\r\n//       return;\r\n//     }\r\n\r\n//     const recognition = new window.webkitSpeechRecognition();\r\n//     recognition.lang = \"en-US\";\r\n//     recognition.interimResults = false;\r\n//     recognition.maxAlternatives = 1;\r\n\r\n//     recognition.onstart = () => setIsListening(true);\r\n//     recognition.onresult = (event) => {\r\n//       const transcript = event.results[0][0].transcript;\r\n//       setIsListening(false);\r\n//       sendMessage(transcript);\r\n//     };\r\n//     recognition.onerror = (event) => {\r\n//       console.error(\"Speech recognition error\", event.error);\r\n//       setIsListening(false);\r\n//     };\r\n//     recognition.onend = () => setIsListening(false);\r\n\r\n//     recognition.start();\r\n//   };\r\n\r\n//   const changeFontSize = (adjustment) => {\r\n//     setFontSize((prevSize) => Math.max(12, Math.min(36, prevSize + adjustment))); // Restrict between 12px and 36px\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <div className=\"triangle-container\">\r\n//         <svg className=\"triangle\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\">\r\n//           <path className=\"wave\" d=\"M 0,100 Q 20,75 45,85 T 100,15 L 100,0 L 0,0 Z\" fill=\"#5A9BFF\" transform=\"skewY(-25)\"/>\r\n//         </svg>\r\n//         <button className=\"btn-invis\" onClick={() => navigate('/')}>\r\n//           <span className=\"material-icons invis\">arrow_back_ios</span>\r\n//         </button>\r\n//         <div className=\"coco-container\">\r\n//           <Coco className=\"coco-small\" />\r\n//         </div>\r\n//       </div>\r\n\r\n//       <div className=\"font-size-buttons\">\r\n//         <button onClick={() => changeFontSize(-2)}>A-</button>\r\n//         <button onClick={() => changeFontSize(2)}>A+</button>\r\n//       </div>\r\n\r\n//       {/* Chat container */}\r\n//       <div className=\"chat-container\">\r\n//         <div id=\"chat-box\" className=\"chat-box\">\r\n//           {messages.map((msg, index) => (\r\n//             <div\r\n//               key={index}\r\n//               className={`chat-message ${msg.className}`}\r\n//               style={{ fontSize: `${fontSize}px` }}\r\n//             >\r\n//               {msg.content}\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//         <div className=\"input-container\">\r\n//           <button\r\n//             onClick={handleSpeechToText}\r\n//             className=\"speech-button\"\r\n//             disabled={isListening}\r\n//           >\r\n//             {isListening ? \"Listening...\" : \"Start Speaking\"}\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default SpeakPage;"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}