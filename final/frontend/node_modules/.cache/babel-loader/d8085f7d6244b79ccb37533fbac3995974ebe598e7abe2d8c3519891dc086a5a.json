{"ast":null,"code":"var _jsxFileName = \"/Users/kavinrajasekaran/Documents/UCMerced/CurrentClasses/CSE120/Semcorel-LLM/Semcorel-LLM-Project/final/frontend/src/SpeakPage.js\",\n  _s = $RefreshSig$();\n// // src/SpeakPage.js\n// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import Coco from './Coco';\n// import './SpeakPage.css';\n\n// const SpeakPage = () => {\n//   const [conversationHistory, setConversationHistory] = useState([]);\n//   const [messages, setMessages] = useState([]);\n//   const [fontSize, setFontSize] = useState(19); // Default font size\n//   const [isListening, setIsListening] = useState(false);\n//   const navigate = useNavigate();\n\n//   const addMessage = (content, className) => {\n//     setMessages((prevMessages) => [\n//       ...prevMessages,\n//       { content, className },\n//     ]);\n//   };\n\n//   const sendMessage = async (messageContent) => {\n//     if (!messageContent.trim()) return;\n\n//     // Display user message\n//     addMessage(messageContent, 'user-message');\n//     setConversationHistory((prevHistory) => [\n//       ...prevHistory,\n//       { role: 'user', content: messageContent },\n//     ]);\n\n//     try {\n//       // Prepare JSON data\n//       const payload = {\n//         userInput: messageContent,\n//         history: JSON.stringify(conversationHistory),\n//       };\n\n//       // Send message to the server\n//       const response = await fetch('/submit', { // Specify full URL\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(payload),\n//       });\n\n//       const data = await response.json();\n\n//       // Display bot response\n//       addMessage(data.response, 'bot-message');\n//       setConversationHistory((prevHistory) => [\n//         ...prevHistory,\n//         { role: 'assistant', content: data.response },\n//       ]);\n\n//       // Speak the bot's response\n//       if ('speechSynthesis' in window) {\n//         const utterance = new SpeechSynthesisUtterance(data.response);\n//         utterance.lang = 'en-US';\n//         window.speechSynthesis.speak(utterance);\n//       } else {\n//         console.warn('Text-to-speech is not supported in this browser.');\n//       }\n//     } catch (error) {\n//       console.error('Error:', error);\n//       addMessage('An error occurred while sending your message.', 'bot-message');\n//     }\n//   };\n\n//   // Function for handling Speech-to-Text\n//   const handleSpeechToText = () => {\n//     if (!(\"webkitSpeechRecognition\" in window)) {\n//       alert(\"Speech recognition is not supported in this browser.\");\n//       return;\n//     }\n\n//     const recognition = new window.webkitSpeechRecognition();\n//     recognition.lang = \"en-US\";\n//     recognition.interimResults = false;\n//     recognition.maxAlternatives = 1;\n\n//     recognition.onstart = () => setIsListening(true);\n//     recognition.onresult = (event) => {\n//       const transcript = event.results[0][0].transcript;\n//       setIsListening(false);\n//       sendMessage(transcript);\n//     };\n//     recognition.onerror = (event) => {\n//       console.error(\"Speech recognition error\", event.error);\n//       setIsListening(false);\n//     };\n//     recognition.onend = () => setIsListening(false);\n\n//     recognition.start();\n//   };\n\n//   const changeFontSize = (adjustment) => {\n//     setFontSize((prevSize) => Math.max(12, Math.min(36, prevSize + adjustment))); // Restrict between 12px and 36px\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <div className=\"triangle-container\">\n//         <svg className=\"triangle\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\">\n//           <path className=\"wave\" d=\"M 0,100 Q 20,75 45,85 T 100,15 L 100,0 L 0,0 Z\" fill=\"#5A9BFF\" transform=\"skewY(-25)\"/>\n//         </svg>\n//         <button className=\"btn-invis\" onClick={() => navigate('/')}>\n//           <span className=\"material-icons invis\">arrow_back_ios</span>\n//         </button>\n//         <div className=\"coco-container\">\n//           <Coco className=\"coco-small\" />\n//         </div>\n//       </div>\n\n//       <div className=\"font-size-buttons\">\n//         <button onClick={() => changeFontSize(-2)}>A-</button>\n//         <button onClick={() => changeFontSize(2)}>A+</button>\n//       </div>\n\n//       {/* Chat container */}\n//       <div className=\"chat-container\">\n//         <div id=\"chat-box\" className=\"chat-box\">\n//           {messages.map((msg, index) => (\n//             <div\n//               key={index}\n//               className={`chat-message ${msg.className}`}\n//               style={{ fontSize: `${fontSize}px` }}\n//             >\n//               {msg.content}\n//             </div>\n//           ))}\n//         </div>\n//         <div className=\"input-container\">\n//           <button\n//             onClick={handleSpeechToText}\n//             className=\"speech-button\"\n//             disabled={isListening}\n//           >\n//             {isListening ? \"Listening...\" : \"Start Speaking\"}\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default SpeakPage;\n\n// src/SpeakPage.js\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Coco from './Coco';\nimport './SpeakPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpeakPage = () => {\n  _s();\n  const [conversationHistory, setConversationHistory] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [fontSize, setFontSize] = useState(19); // Default font size\n  const [isListening, setIsListening] = useState(false);\n  const [voices, setVoices] = useState([]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Load available voices for Safari fix\n    if ('speechSynthesis' in window) {\n      const loadVoices = () => {\n        const availableVoices = window.speechSynthesis.getVoices();\n        setVoices(availableVoices);\n      };\n      loadVoices();\n      window.speechSynthesis.onvoiceschanged = loadVoices;\n    }\n  }, []);\n  const addMessage = (content, className) => {\n    setMessages(prevMessages => [...prevMessages, {\n      content,\n      className\n    }]);\n  };\n  const sendMessage = async messageContent => {\n    if (!messageContent.trim()) return;\n\n    // Display user message\n    addMessage(messageContent, 'user-message');\n    setConversationHistory(prevHistory => [...prevHistory, {\n      role: 'user',\n      content: messageContent\n    }]);\n    try {\n      // Prepare JSON data\n      const payload = {\n        userInput: messageContent,\n        history: JSON.stringify(conversationHistory)\n      };\n\n      // Send message to the server\n      const response = await fetch('/submit', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      const data = await response.json();\n\n      // Display bot response\n      addMessage(data.response, 'bot-message');\n      setConversationHistory(prevHistory => [...prevHistory, {\n        role: 'assistant',\n        content: data.response\n      }]);\n\n      // Speak the bot's response\n      if ('speechSynthesis' in window) {\n        const utterance = new SpeechSynthesisUtterance(data.response);\n        utterance.lang = 'en-US';\n        utterance.voice = voices.find(voice => voice.lang === 'en-US') || null; // Use an English voice if available\n        window.speechSynthesis.speak(utterance);\n      } else {\n        console.warn('Text-to-speech is not supported in this browser.');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      addMessage('An error occurred while sending your message.', 'bot-message');\n    }\n  };\n  const handleSpeechToText = () => {\n    if (!('webkitSpeechRecognition' in window)) {\n      alert('Speech recognition is not supported in this browser.');\n      return;\n    }\n    const recognition = new window.webkitSpeechRecognition();\n    recognition.lang = 'en-US';\n    recognition.interimResults = false;\n    recognition.maxAlternatives = 1;\n    recognition.onstart = () => setIsListening(true);\n    recognition.onresult = event => {\n      const transcript = event.results[0][0].transcript;\n      setIsListening(false);\n      sendMessage(transcript);\n    };\n    recognition.onerror = event => {\n      console.error('Speech recognition error', event.error);\n      setIsListening(false);\n    };\n    recognition.onend = () => setIsListening(false);\n    recognition.start();\n  };\n  const changeFontSize = adjustment => {\n    setFontSize(prevSize => Math.max(12, Math.min(36, prevSize + adjustment))); // Restrict between 12px and 36px\n  };\n  const enableSpeechSynthesis = () => {\n    // Ensure speech synthesis is enabled on Safari\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance('Speech synthesis is now enabled.');\n      utterance.lang = 'en-US';\n      window.speechSynthesis.speak(utterance);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"triangle-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        className: \"triangle\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: \"0 0 100 100\",\n        preserveAspectRatio: \"none\",\n        children: /*#__PURE__*/_jsxDEV(\"path\", {\n          className: \"wave\",\n          d: \"M 0,100 Q 20,75 45,85 T 100,15 L 100,0 L 0,0 Z\",\n          fill: \"#5A9BFF\",\n          transform: \"skewY(-25)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-invis\",\n        onClick: () => navigate('/'),\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"material-icons invis\",\n          children: \"arrow_back_ios\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"coco-container\",\n        children: /*#__PURE__*/_jsxDEV(Coco, {\n          className: \"coco-small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"font-size-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => changeFontSize(-2),\n        children: \"A-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => changeFontSize(2),\n        children: \"A+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: enableSpeechSynthesis,\n        children: \"Enable Speech\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"chat-box\",\n        className: \"chat-box\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-message ${msg.className}`,\n          style: {\n            fontSize: `${fontSize}px`\n          },\n          children: msg.content\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSpeechToText,\n          className: \"speech-button\",\n          disabled: isListening,\n          children: isListening ? 'Listening...' : 'Start Speaking'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 273,\n    columnNumber: 5\n  }, this);\n};\n_s(SpeakPage, \"E2H2mr1QliXyrHTFulhvGJIWZE4=\", false, function () {\n  return [useNavigate];\n});\n_c = SpeakPage;\nexport default SpeakPage;\nvar _c;\n$RefreshReg$(_c, \"SpeakPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Coco","jsxDEV","_jsxDEV","SpeakPage","_s","conversationHistory","setConversationHistory","messages","setMessages","fontSize","setFontSize","isListening","setIsListening","voices","setVoices","navigate","window","loadVoices","availableVoices","speechSynthesis","getVoices","onvoiceschanged","addMessage","content","className","prevMessages","sendMessage","messageContent","trim","prevHistory","role","payload","userInput","history","JSON","stringify","response","fetch","method","headers","body","data","json","utterance","SpeechSynthesisUtterance","lang","voice","find","speak","console","warn","error","handleSpeechToText","alert","recognition","webkitSpeechRecognition","interimResults","maxAlternatives","onstart","onresult","event","transcript","results","onerror","onend","start","changeFontSize","adjustment","prevSize","Math","max","min","enableSpeechSynthesis","children","xmlns","viewBox","preserveAspectRatio","d","fill","transform","fileName","_jsxFileName","lineNumber","columnNumber","onClick","id","map","msg","index","style","disabled","_c","$RefreshReg$"],"sources":["/Users/kavinrajasekaran/Documents/UCMerced/CurrentClasses/CSE120/Semcorel-LLM/Semcorel-LLM-Project/final/frontend/src/SpeakPage.js"],"sourcesContent":["\r\n// // src/SpeakPage.js\r\n// import React, { useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import Coco from './Coco';\r\n// import './SpeakPage.css';\r\n\r\n// const SpeakPage = () => {\r\n//   const [conversationHistory, setConversationHistory] = useState([]);\r\n//   const [messages, setMessages] = useState([]);\r\n//   const [fontSize, setFontSize] = useState(19); // Default font size\r\n//   const [isListening, setIsListening] = useState(false);\r\n//   const navigate = useNavigate();\r\n\r\n//   const addMessage = (content, className) => {\r\n//     setMessages((prevMessages) => [\r\n//       ...prevMessages,\r\n//       { content, className },\r\n//     ]);\r\n//   };\r\n\r\n//   const sendMessage = async (messageContent) => {\r\n//     if (!messageContent.trim()) return;\r\n\r\n//     // Display user message\r\n//     addMessage(messageContent, 'user-message');\r\n//     setConversationHistory((prevHistory) => [\r\n//       ...prevHistory,\r\n//       { role: 'user', content: messageContent },\r\n//     ]);\r\n\r\n//     try {\r\n//       // Prepare JSON data\r\n//       const payload = {\r\n//         userInput: messageContent,\r\n//         history: JSON.stringify(conversationHistory),\r\n//       };\r\n\r\n//       // Send message to the server\r\n//       const response = await fetch('/submit', { // Specify full URL\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify(payload),\r\n//       });\r\n\r\n//       const data = await response.json();\r\n\r\n//       // Display bot response\r\n//       addMessage(data.response, 'bot-message');\r\n//       setConversationHistory((prevHistory) => [\r\n//         ...prevHistory,\r\n//         { role: 'assistant', content: data.response },\r\n//       ]);\r\n\r\n//       // Speak the bot's response\r\n//       if ('speechSynthesis' in window) {\r\n//         const utterance = new SpeechSynthesisUtterance(data.response);\r\n//         utterance.lang = 'en-US';\r\n//         window.speechSynthesis.speak(utterance);\r\n//       } else {\r\n//         console.warn('Text-to-speech is not supported in this browser.');\r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Error:', error);\r\n//       addMessage('An error occurred while sending your message.', 'bot-message');\r\n//     }\r\n//   };\r\n\r\n//   // Function for handling Speech-to-Text\r\n//   const handleSpeechToText = () => {\r\n//     if (!(\"webkitSpeechRecognition\" in window)) {\r\n//       alert(\"Speech recognition is not supported in this browser.\");\r\n//       return;\r\n//     }\r\n\r\n//     const recognition = new window.webkitSpeechRecognition();\r\n//     recognition.lang = \"en-US\";\r\n//     recognition.interimResults = false;\r\n//     recognition.maxAlternatives = 1;\r\n\r\n//     recognition.onstart = () => setIsListening(true);\r\n//     recognition.onresult = (event) => {\r\n//       const transcript = event.results[0][0].transcript;\r\n//       setIsListening(false);\r\n//       sendMessage(transcript);\r\n//     };\r\n//     recognition.onerror = (event) => {\r\n//       console.error(\"Speech recognition error\", event.error);\r\n//       setIsListening(false);\r\n//     };\r\n//     recognition.onend = () => setIsListening(false);\r\n\r\n//     recognition.start();\r\n//   };\r\n\r\n//   const changeFontSize = (adjustment) => {\r\n//     setFontSize((prevSize) => Math.max(12, Math.min(36, prevSize + adjustment))); // Restrict between 12px and 36px\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <div className=\"triangle-container\">\r\n//         <svg className=\"triangle\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\">\r\n//           <path className=\"wave\" d=\"M 0,100 Q 20,75 45,85 T 100,15 L 100,0 L 0,0 Z\" fill=\"#5A9BFF\" transform=\"skewY(-25)\"/>\r\n//         </svg>\r\n//         <button className=\"btn-invis\" onClick={() => navigate('/')}>\r\n//           <span className=\"material-icons invis\">arrow_back_ios</span>\r\n//         </button>\r\n//         <div className=\"coco-container\">\r\n//           <Coco className=\"coco-small\" />\r\n//         </div>\r\n//       </div>\r\n\r\n//       <div className=\"font-size-buttons\">\r\n//         <button onClick={() => changeFontSize(-2)}>A-</button>\r\n//         <button onClick={() => changeFontSize(2)}>A+</button>\r\n//       </div>\r\n\r\n//       {/* Chat container */}\r\n//       <div className=\"chat-container\">\r\n//         <div id=\"chat-box\" className=\"chat-box\">\r\n//           {messages.map((msg, index) => (\r\n//             <div\r\n//               key={index}\r\n//               className={`chat-message ${msg.className}`}\r\n//               style={{ fontSize: `${fontSize}px` }}\r\n//             >\r\n//               {msg.content}\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//         <div className=\"input-container\">\r\n//           <button\r\n//             onClick={handleSpeechToText}\r\n//             className=\"speech-button\"\r\n//             disabled={isListening}\r\n//           >\r\n//             {isListening ? \"Listening...\" : \"Start Speaking\"}\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default SpeakPage;\r\n\r\n// src/SpeakPage.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Coco from './Coco';\r\nimport './SpeakPage.css';\r\n\r\nconst SpeakPage = () => {\r\n  const [conversationHistory, setConversationHistory] = useState([]);\r\n  const [messages, setMessages] = useState([]);\r\n  const [fontSize, setFontSize] = useState(19); // Default font size\r\n  const [isListening, setIsListening] = useState(false);\r\n  const [voices, setVoices] = useState([]);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // Load available voices for Safari fix\r\n    if ('speechSynthesis' in window) {\r\n      const loadVoices = () => {\r\n        const availableVoices = window.speechSynthesis.getVoices();\r\n        setVoices(availableVoices);\r\n      };\r\n      loadVoices();\r\n      window.speechSynthesis.onvoiceschanged = loadVoices;\r\n    }\r\n  }, []);\r\n\r\n  const addMessage = (content, className) => {\r\n    setMessages((prevMessages) => [\r\n      ...prevMessages,\r\n      { content, className },\r\n    ]);\r\n  };\r\n\r\n  const sendMessage = async (messageContent) => {\r\n    if (!messageContent.trim()) return;\r\n\r\n    // Display user message\r\n    addMessage(messageContent, 'user-message');\r\n    setConversationHistory((prevHistory) => [\r\n      ...prevHistory,\r\n      { role: 'user', content: messageContent },\r\n    ]);\r\n\r\n    try {\r\n      // Prepare JSON data\r\n      const payload = {\r\n        userInput: messageContent,\r\n        history: JSON.stringify(conversationHistory),\r\n      };\r\n\r\n      // Send message to the server\r\n      const response = await fetch('/submit', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(payload),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      // Display bot response\r\n      addMessage(data.response, 'bot-message');\r\n      setConversationHistory((prevHistory) => [\r\n        ...prevHistory,\r\n        { role: 'assistant', content: data.response },\r\n      ]);\r\n\r\n      // Speak the bot's response\r\n      if ('speechSynthesis' in window) {\r\n        const utterance = new SpeechSynthesisUtterance(data.response);\r\n        utterance.lang = 'en-US';\r\n        utterance.voice = voices.find((voice) => voice.lang === 'en-US') || null; // Use an English voice if available\r\n        window.speechSynthesis.speak(utterance);\r\n      } else {\r\n        console.warn('Text-to-speech is not supported in this browser.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      addMessage('An error occurred while sending your message.', 'bot-message');\r\n    }\r\n  };\r\n\r\n  const handleSpeechToText = () => {\r\n    if (!('webkitSpeechRecognition' in window)) {\r\n      alert('Speech recognition is not supported in this browser.');\r\n      return;\r\n    }\r\n\r\n    const recognition = new window.webkitSpeechRecognition();\r\n    recognition.lang = 'en-US';\r\n    recognition.interimResults = false;\r\n    recognition.maxAlternatives = 1;\r\n\r\n    recognition.onstart = () => setIsListening(true);\r\n    recognition.onresult = (event) => {\r\n      const transcript = event.results[0][0].transcript;\r\n      setIsListening(false);\r\n      sendMessage(transcript);\r\n    };\r\n    recognition.onerror = (event) => {\r\n      console.error('Speech recognition error', event.error);\r\n      setIsListening(false);\r\n    };\r\n    recognition.onend = () => setIsListening(false);\r\n\r\n    recognition.start();\r\n  };\r\n\r\n  const changeFontSize = (adjustment) => {\r\n    setFontSize((prevSize) => Math.max(12, Math.min(36, prevSize + adjustment))); // Restrict between 12px and 36px\r\n  };\r\n\r\n  const enableSpeechSynthesis = () => {\r\n    // Ensure speech synthesis is enabled on Safari\r\n    if ('speechSynthesis' in window) {\r\n      const utterance = new SpeechSynthesisUtterance('Speech synthesis is now enabled.');\r\n      utterance.lang = 'en-US';\r\n      window.speechSynthesis.speak(utterance);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"triangle-container\">\r\n        <svg\r\n          className=\"triangle\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          viewBox=\"0 0 100 100\"\r\n          preserveAspectRatio=\"none\"\r\n        >\r\n          <path\r\n            className=\"wave\"\r\n            d=\"M 0,100 Q 20,75 45,85 T 100,15 L 100,0 L 0,0 Z\"\r\n            fill=\"#5A9BFF\"\r\n            transform=\"skewY(-25)\"\r\n          />\r\n        </svg>\r\n        <button className=\"btn-invis\" onClick={() => navigate('/')}>\r\n          <span className=\"material-icons invis\">arrow_back_ios</span>\r\n        </button>\r\n        <div className=\"coco-container\">\r\n          <Coco className=\"coco-small\" />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"font-size-buttons\">\r\n        <button onClick={() => changeFontSize(-2)}>A-</button>\r\n        <button onClick={() => changeFontSize(2)}>A+</button>\r\n        <button onClick={enableSpeechSynthesis}>Enable Speech</button>\r\n      </div>\r\n\r\n      {/* Chat container */}\r\n      <div className=\"chat-container\">\r\n        <div id=\"chat-box\" className=\"chat-box\">\r\n          {messages.map((msg, index) => (\r\n            <div\r\n              key={index}\r\n              className={`chat-message ${msg.className}`}\r\n              style={{ fontSize: `${fontSize}px` }}\r\n            >\r\n              {msg.content}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"input-container\">\r\n          <button\r\n            onClick={handleSpeechToText}\r\n            className=\"speech-button\"\r\n            disabled={isListening}\r\n          >\r\n            {isListening ? 'Listening...' : 'Start Speaking'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpeakPage;"],"mappings":";;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAClE,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACgB,MAAM,EAAEC,SAAS,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAMkB,QAAQ,GAAGhB,WAAW,CAAC,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd;IACA,IAAI,iBAAiB,IAAIkB,MAAM,EAAE;MAC/B,MAAMC,UAAU,GAAGA,CAAA,KAAM;QACvB,MAAMC,eAAe,GAAGF,MAAM,CAACG,eAAe,CAACC,SAAS,CAAC,CAAC;QAC1DN,SAAS,CAACI,eAAe,CAAC;MAC5B,CAAC;MACDD,UAAU,CAAC,CAAC;MACZD,MAAM,CAACG,eAAe,CAACE,eAAe,GAAGJ,UAAU;IACrD;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,UAAU,GAAGA,CAACC,OAAO,EAAEC,SAAS,KAAK;IACzChB,WAAW,CAAEiB,YAAY,IAAK,CAC5B,GAAGA,YAAY,EACf;MAAEF,OAAO;MAAEC;IAAU,CAAC,CACvB,CAAC;EACJ,CAAC;EAED,MAAME,WAAW,GAAG,MAAOC,cAAc,IAAK;IAC5C,IAAI,CAACA,cAAc,CAACC,IAAI,CAAC,CAAC,EAAE;;IAE5B;IACAN,UAAU,CAACK,cAAc,EAAE,cAAc,CAAC;IAC1CrB,sBAAsB,CAAEuB,WAAW,IAAK,CACtC,GAAGA,WAAW,EACd;MAAEC,IAAI,EAAE,MAAM;MAAEP,OAAO,EAAEI;IAAe,CAAC,CAC1C,CAAC;IAEF,IAAI;MACF;MACA,MAAMI,OAAO,GAAG;QACdC,SAAS,EAAEL,cAAc;QACzBM,OAAO,EAAEC,IAAI,CAACC,SAAS,CAAC9B,mBAAmB;MAC7C,CAAC;;MAED;MACA,MAAM+B,QAAQ,GAAG,MAAMC,KAAK,CAAC,SAAS,EAAE;QACtCC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEN,IAAI,CAACC,SAAS,CAACJ,OAAO;MAC9B,CAAC,CAAC;MAEF,MAAMU,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;;MAElC;MACApB,UAAU,CAACmB,IAAI,CAACL,QAAQ,EAAE,aAAa,CAAC;MACxC9B,sBAAsB,CAAEuB,WAAW,IAAK,CACtC,GAAGA,WAAW,EACd;QAAEC,IAAI,EAAE,WAAW;QAAEP,OAAO,EAAEkB,IAAI,CAACL;MAAS,CAAC,CAC9C,CAAC;;MAEF;MACA,IAAI,iBAAiB,IAAIpB,MAAM,EAAE;QAC/B,MAAM2B,SAAS,GAAG,IAAIC,wBAAwB,CAACH,IAAI,CAACL,QAAQ,CAAC;QAC7DO,SAAS,CAACE,IAAI,GAAG,OAAO;QACxBF,SAAS,CAACG,KAAK,GAAGjC,MAAM,CAACkC,IAAI,CAAED,KAAK,IAAKA,KAAK,CAACD,IAAI,KAAK,OAAO,CAAC,IAAI,IAAI,CAAC,CAAC;QAC1E7B,MAAM,CAACG,eAAe,CAAC6B,KAAK,CAACL,SAAS,CAAC;MACzC,CAAC,MAAM;QACLM,OAAO,CAACC,IAAI,CAAC,kDAAkD,CAAC;MAClE;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9B7B,UAAU,CAAC,+CAA+C,EAAE,aAAa,CAAC;IAC5E;EACF,CAAC;EAED,MAAM8B,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,IAAI,EAAE,yBAAyB,IAAIpC,MAAM,CAAC,EAAE;MAC1CqC,KAAK,CAAC,sDAAsD,CAAC;MAC7D;IACF;IAEA,MAAMC,WAAW,GAAG,IAAItC,MAAM,CAACuC,uBAAuB,CAAC,CAAC;IACxDD,WAAW,CAACT,IAAI,GAAG,OAAO;IAC1BS,WAAW,CAACE,cAAc,GAAG,KAAK;IAClCF,WAAW,CAACG,eAAe,GAAG,CAAC;IAE/BH,WAAW,CAACI,OAAO,GAAG,MAAM9C,cAAc,CAAC,IAAI,CAAC;IAChD0C,WAAW,CAACK,QAAQ,GAAIC,KAAK,IAAK;MAChC,MAAMC,UAAU,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACD,UAAU;MACjDjD,cAAc,CAAC,KAAK,CAAC;MACrBc,WAAW,CAACmC,UAAU,CAAC;IACzB,CAAC;IACDP,WAAW,CAACS,OAAO,GAAIH,KAAK,IAAK;MAC/BX,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAES,KAAK,CAACT,KAAK,CAAC;MACtDvC,cAAc,CAAC,KAAK,CAAC;IACvB,CAAC;IACD0C,WAAW,CAACU,KAAK,GAAG,MAAMpD,cAAc,CAAC,KAAK,CAAC;IAE/C0C,WAAW,CAACW,KAAK,CAAC,CAAC;EACrB,CAAC;EAED,MAAMC,cAAc,GAAIC,UAAU,IAAK;IACrCzD,WAAW,CAAE0D,QAAQ,IAAKC,IAAI,CAACC,GAAG,CAAC,EAAE,EAAED,IAAI,CAACE,GAAG,CAAC,EAAE,EAAEH,QAAQ,GAAGD,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;EAChF,CAAC;EAED,MAAMK,qBAAqB,GAAGA,CAAA,KAAM;IAClC;IACA,IAAI,iBAAiB,IAAIxD,MAAM,EAAE;MAC/B,MAAM2B,SAAS,GAAG,IAAIC,wBAAwB,CAAC,kCAAkC,CAAC;MAClFD,SAAS,CAACE,IAAI,GAAG,OAAO;MACxB7B,MAAM,CAACG,eAAe,CAAC6B,KAAK,CAACL,SAAS,CAAC;IACzC;EACF,CAAC;EAED,oBACEzC,OAAA;IAAKsB,SAAS,EAAC,WAAW;IAAAiD,QAAA,gBACxBvE,OAAA;MAAKsB,SAAS,EAAC,oBAAoB;MAAAiD,QAAA,gBACjCvE,OAAA;QACEsB,SAAS,EAAC,UAAU;QACpBkD,KAAK,EAAC,4BAA4B;QAClCC,OAAO,EAAC,aAAa;QACrBC,mBAAmB,EAAC,MAAM;QAAAH,QAAA,eAE1BvE,OAAA;UACEsB,SAAS,EAAC,MAAM;UAChBqD,CAAC,EAAC,gDAAgD;UAClDC,IAAI,EAAC,SAAS;UACdC,SAAS,EAAC;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACNjF,OAAA;QAAQsB,SAAS,EAAC,WAAW;QAAC4D,OAAO,EAAEA,CAAA,KAAMrE,QAAQ,CAAC,GAAG,CAAE;QAAA0D,QAAA,eACzDvE,OAAA;UAAMsB,SAAS,EAAC,sBAAsB;UAAAiD,QAAA,EAAC;QAAc;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtD,CAAC,eACTjF,OAAA;QAAKsB,SAAS,EAAC,gBAAgB;QAAAiD,QAAA,eAC7BvE,OAAA,CAACF,IAAI;UAACwB,SAAS,EAAC;QAAY;UAAAwD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENjF,OAAA;MAAKsB,SAAS,EAAC,mBAAmB;MAAAiD,QAAA,gBAChCvE,OAAA;QAAQkF,OAAO,EAAEA,CAAA,KAAMlB,cAAc,CAAC,CAAC,CAAC,CAAE;QAAAO,QAAA,EAAC;MAAE;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACtDjF,OAAA;QAAQkF,OAAO,EAAEA,CAAA,KAAMlB,cAAc,CAAC,CAAC,CAAE;QAAAO,QAAA,EAAC;MAAE;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACrDjF,OAAA;QAAQkF,OAAO,EAAEZ,qBAAsB;QAAAC,QAAA,EAAC;MAAa;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3D,CAAC,eAGNjF,OAAA;MAAKsB,SAAS,EAAC,gBAAgB;MAAAiD,QAAA,gBAC7BvE,OAAA;QAAKmF,EAAE,EAAC,UAAU;QAAC7D,SAAS,EAAC,UAAU;QAAAiD,QAAA,EACpClE,QAAQ,CAAC+E,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACvBtF,OAAA;UAEEsB,SAAS,EAAE,gBAAgB+D,GAAG,CAAC/D,SAAS,EAAG;UAC3CiE,KAAK,EAAE;YAAEhF,QAAQ,EAAE,GAAGA,QAAQ;UAAK,CAAE;UAAAgE,QAAA,EAEpCc,GAAG,CAAChE;QAAO,GAJPiE,KAAK;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKP,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACNjF,OAAA;QAAKsB,SAAS,EAAC,iBAAiB;QAAAiD,QAAA,eAC9BvE,OAAA;UACEkF,OAAO,EAAEhC,kBAAmB;UAC5B5B,SAAS,EAAC,eAAe;UACzBkE,QAAQ,EAAE/E,WAAY;UAAA8D,QAAA,EAErB9D,WAAW,GAAG,cAAc,GAAG;QAAgB;UAAAqE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC/E,EAAA,CA3KID,SAAS;EAAA,QAMIJ,WAAW;AAAA;AAAA4F,EAAA,GANxBxF,SAAS;AA6Kf,eAAeA,SAAS;AAAC,IAAAwF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}